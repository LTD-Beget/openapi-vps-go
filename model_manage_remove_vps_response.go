/*
API Облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.6.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps

import (
	"encoding/json"
)

// ManageRemoveVpsResponse struct for ManageRemoveVpsResponse
type ManageRemoveVpsResponse struct {
	Vps *ManageVpsInfo `json:"vps,omitempty"`
	Error *ManageRemoveVpsResponseError `json:"error,omitempty"`
}

// NewManageRemoveVpsResponse instantiates a new ManageRemoveVpsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageRemoveVpsResponse() *ManageRemoveVpsResponse {
	this := ManageRemoveVpsResponse{}
	return &this
}

// NewManageRemoveVpsResponseWithDefaults instantiates a new ManageRemoveVpsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageRemoveVpsResponseWithDefaults() *ManageRemoveVpsResponse {
	this := ManageRemoveVpsResponse{}
	return &this
}

// GetVps returns the Vps field value if set, zero value otherwise.
func (o *ManageRemoveVpsResponse) GetVps() ManageVpsInfo {
	if o == nil || isNil(o.Vps) {
		var ret ManageVpsInfo
		return ret
	}
	return *o.Vps
}

// GetVpsOk returns a tuple with the Vps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageRemoveVpsResponse) GetVpsOk() (*ManageVpsInfo, bool) {
	if o == nil || isNil(o.Vps) {
    return nil, false
	}
	return o.Vps, true
}

// HasVps returns a boolean if a field has been set.
func (o *ManageRemoveVpsResponse) HasVps() bool {
	if o != nil && !isNil(o.Vps) {
		return true
	}

	return false
}

// SetVps gets a reference to the given ManageVpsInfo and assigns it to the Vps field.
func (o *ManageRemoveVpsResponse) SetVps(v ManageVpsInfo) {
	o.Vps = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ManageRemoveVpsResponse) GetError() ManageRemoveVpsResponseError {
	if o == nil || isNil(o.Error) {
		var ret ManageRemoveVpsResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageRemoveVpsResponse) GetErrorOk() (*ManageRemoveVpsResponseError, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ManageRemoveVpsResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ManageRemoveVpsResponseError and assigns it to the Error field.
func (o *ManageRemoveVpsResponse) SetError(v ManageRemoveVpsResponseError) {
	o.Error = &v
}

func (o ManageRemoveVpsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Vps) {
		toSerialize["vps"] = o.Vps
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableManageRemoveVpsResponse struct {
	value *ManageRemoveVpsResponse
	isSet bool
}

func (v NullableManageRemoveVpsResponse) Get() *ManageRemoveVpsResponse {
	return v.value
}

func (v *NullableManageRemoveVpsResponse) Set(val *ManageRemoveVpsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableManageRemoveVpsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableManageRemoveVpsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageRemoveVpsResponse(val *ManageRemoveVpsResponse) *NullableManageRemoveVpsResponse {
	return &NullableManageRemoveVpsResponse{value: val, isSet: true}
}

func (v NullableManageRemoveVpsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageRemoveVpsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


