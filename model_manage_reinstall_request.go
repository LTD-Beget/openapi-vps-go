/*
API Облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps

import (
	"encoding/json"
)

// ManageReinstallRequest struct for ManageReinstallRequest
type ManageReinstallRequest struct {
	Id *string `json:"id,omitempty"`
	SshKeys []int32 `json:"ssh_keys,omitempty"`
	Password *string `json:"password,omitempty"`
	Software *ManageSoftwareInstallInfo `json:"software,omitempty"`
	LicenseId *int32 `json:"license_id,omitempty"`
}

// NewManageReinstallRequest instantiates a new ManageReinstallRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageReinstallRequest() *ManageReinstallRequest {
	this := ManageReinstallRequest{}
	return &this
}

// NewManageReinstallRequestWithDefaults instantiates a new ManageReinstallRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageReinstallRequestWithDefaults() *ManageReinstallRequest {
	this := ManageReinstallRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManageReinstallRequest) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageReinstallRequest) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManageReinstallRequest) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ManageReinstallRequest) SetId(v string) {
	o.Id = &v
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *ManageReinstallRequest) GetSshKeys() []int32 {
	if o == nil || isNil(o.SshKeys) {
		var ret []int32
		return ret
	}
	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageReinstallRequest) GetSshKeysOk() ([]int32, bool) {
	if o == nil || isNil(o.SshKeys) {
    return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *ManageReinstallRequest) HasSshKeys() bool {
	if o != nil && !isNil(o.SshKeys) {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given []int32 and assigns it to the SshKeys field.
func (o *ManageReinstallRequest) SetSshKeys(v []int32) {
	o.SshKeys = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ManageReinstallRequest) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageReinstallRequest) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
    return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ManageReinstallRequest) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ManageReinstallRequest) SetPassword(v string) {
	o.Password = &v
}

// GetSoftware returns the Software field value if set, zero value otherwise.
func (o *ManageReinstallRequest) GetSoftware() ManageSoftwareInstallInfo {
	if o == nil || isNil(o.Software) {
		var ret ManageSoftwareInstallInfo
		return ret
	}
	return *o.Software
}

// GetSoftwareOk returns a tuple with the Software field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageReinstallRequest) GetSoftwareOk() (*ManageSoftwareInstallInfo, bool) {
	if o == nil || isNil(o.Software) {
    return nil, false
	}
	return o.Software, true
}

// HasSoftware returns a boolean if a field has been set.
func (o *ManageReinstallRequest) HasSoftware() bool {
	if o != nil && !isNil(o.Software) {
		return true
	}

	return false
}

// SetSoftware gets a reference to the given ManageSoftwareInstallInfo and assigns it to the Software field.
func (o *ManageReinstallRequest) SetSoftware(v ManageSoftwareInstallInfo) {
	o.Software = &v
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *ManageReinstallRequest) GetLicenseId() int32 {
	if o == nil || isNil(o.LicenseId) {
		var ret int32
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageReinstallRequest) GetLicenseIdOk() (*int32, bool) {
	if o == nil || isNil(o.LicenseId) {
    return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *ManageReinstallRequest) HasLicenseId() bool {
	if o != nil && !isNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given int32 and assigns it to the LicenseId field.
func (o *ManageReinstallRequest) SetLicenseId(v int32) {
	o.LicenseId = &v
}

func (o ManageReinstallRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.SshKeys) {
		toSerialize["ssh_keys"] = o.SshKeys
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !isNil(o.Software) {
		toSerialize["software"] = o.Software
	}
	if !isNil(o.LicenseId) {
		toSerialize["license_id"] = o.LicenseId
	}
	return json.Marshal(toSerialize)
}

type NullableManageReinstallRequest struct {
	value *ManageReinstallRequest
	isSet bool
}

func (v NullableManageReinstallRequest) Get() *ManageReinstallRequest {
	return v.value
}

func (v *NullableManageReinstallRequest) Set(val *ManageReinstallRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManageReinstallRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManageReinstallRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageReinstallRequest(val *ManageReinstallRequest) *NullableManageReinstallRequest {
	return &NullableManageReinstallRequest{value: val, isSet: true}
}

func (v NullableManageReinstallRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageReinstallRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


