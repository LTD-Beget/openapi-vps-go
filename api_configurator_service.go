/*
API Облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.7.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ConfiguratorServiceApiService ConfiguratorServiceApi service
type ConfiguratorServiceApiService service

type ApiConfiguratorServiceGetCalculationRequest struct {
	ctx context.Context
	ApiService *ConfiguratorServiceApiService
	paramsCpuCount *int32
	paramsDiskSize *int32
	paramsMemory *int32
	region *string
	vpsId *string
	softwareId *int32
	snapshotId *string
	imageId *string
	configurationGroup *string
}

func (r ApiConfiguratorServiceGetCalculationRequest) ParamsCpuCount(paramsCpuCount int32) ApiConfiguratorServiceGetCalculationRequest {
	r.paramsCpuCount = &paramsCpuCount
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) ParamsDiskSize(paramsDiskSize int32) ApiConfiguratorServiceGetCalculationRequest {
	r.paramsDiskSize = &paramsDiskSize
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) ParamsMemory(paramsMemory int32) ApiConfiguratorServiceGetCalculationRequest {
	r.paramsMemory = &paramsMemory
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) Region(region string) ApiConfiguratorServiceGetCalculationRequest {
	r.region = &region
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) VpsId(vpsId string) ApiConfiguratorServiceGetCalculationRequest {
	r.vpsId = &vpsId
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) SoftwareId(softwareId int32) ApiConfiguratorServiceGetCalculationRequest {
	r.softwareId = &softwareId
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) SnapshotId(snapshotId string) ApiConfiguratorServiceGetCalculationRequest {
	r.snapshotId = &snapshotId
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) ImageId(imageId string) ApiConfiguratorServiceGetCalculationRequest {
	r.imageId = &imageId
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) ConfigurationGroup(configurationGroup string) ApiConfiguratorServiceGetCalculationRequest {
	r.configurationGroup = &configurationGroup
	return r
}

func (r ApiConfiguratorServiceGetCalculationRequest) Execute() (*ConfiguratorGetCalculationResponse, *http.Response, error) {
	return r.ApiService.ConfiguratorServiceGetCalculationExecute(r)
}

/*
ConfiguratorServiceGetCalculation Method for ConfiguratorServiceGetCalculation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConfiguratorServiceGetCalculationRequest
*/
func (a *ConfiguratorServiceApiService) ConfiguratorServiceGetCalculation(ctx context.Context) ApiConfiguratorServiceGetCalculationRequest {
	return ApiConfiguratorServiceGetCalculationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfiguratorGetCalculationResponse
func (a *ConfiguratorServiceApiService) ConfiguratorServiceGetCalculationExecute(r ApiConfiguratorServiceGetCalculationRequest) (*ConfiguratorGetCalculationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfiguratorGetCalculationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfiguratorServiceApiService.ConfiguratorServiceGetCalculation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vps/configurator/calculation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.paramsCpuCount != nil {
		localVarQueryParams.Add("params.cpu_count", parameterToString(*r.paramsCpuCount, ""))
	}
	if r.paramsDiskSize != nil {
		localVarQueryParams.Add("params.disk_size", parameterToString(*r.paramsDiskSize, ""))
	}
	if r.paramsMemory != nil {
		localVarQueryParams.Add("params.memory", parameterToString(*r.paramsMemory, ""))
	}
	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.vpsId != nil {
		localVarQueryParams.Add("vps_id", parameterToString(*r.vpsId, ""))
	}
	if r.softwareId != nil {
		localVarQueryParams.Add("software_id", parameterToString(*r.softwareId, ""))
	}
	if r.snapshotId != nil {
		localVarQueryParams.Add("snapshot_id", parameterToString(*r.snapshotId, ""))
	}
	if r.imageId != nil {
		localVarQueryParams.Add("image_id", parameterToString(*r.imageId, ""))
	}
	if r.configurationGroup != nil {
		localVarQueryParams.Add("configuration_group", parameterToString(*r.configurationGroup, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConfiguratorServiceGetConfiguratorInfoRequest struct {
	ctx context.Context
	ApiService *ConfiguratorServiceApiService
	region *string
	configurationGroup *string
}

func (r ApiConfiguratorServiceGetConfiguratorInfoRequest) Region(region string) ApiConfiguratorServiceGetConfiguratorInfoRequest {
	r.region = &region
	return r
}

func (r ApiConfiguratorServiceGetConfiguratorInfoRequest) ConfigurationGroup(configurationGroup string) ApiConfiguratorServiceGetConfiguratorInfoRequest {
	r.configurationGroup = &configurationGroup
	return r
}

func (r ApiConfiguratorServiceGetConfiguratorInfoRequest) Execute() (*ConfiguratorGetConfiguratorInfoResponse, *http.Response, error) {
	return r.ApiService.ConfiguratorServiceGetConfiguratorInfoExecute(r)
}

/*
ConfiguratorServiceGetConfiguratorInfo Method for ConfiguratorServiceGetConfiguratorInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConfiguratorServiceGetConfiguratorInfoRequest
*/
func (a *ConfiguratorServiceApiService) ConfiguratorServiceGetConfiguratorInfo(ctx context.Context) ApiConfiguratorServiceGetConfiguratorInfoRequest {
	return ApiConfiguratorServiceGetConfiguratorInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfiguratorGetConfiguratorInfoResponse
func (a *ConfiguratorServiceApiService) ConfiguratorServiceGetConfiguratorInfoExecute(r ApiConfiguratorServiceGetConfiguratorInfoRequest) (*ConfiguratorGetConfiguratorInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfiguratorGetConfiguratorInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfiguratorServiceApiService.ConfiguratorServiceGetConfiguratorInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vps/configurator/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.configurationGroup != nil {
		localVarQueryParams.Add("configuration_group", parameterToString(*r.configurationGroup, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
