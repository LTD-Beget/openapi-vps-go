/*
API Облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.7.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SoftwareLicenseServiceApiService SoftwareLicenseServiceApi service
type SoftwareLicenseServiceApiService service

type ApiSoftwareLicenseServiceChangeLicensePlanRequest struct {
	ctx context.Context
	ApiService *SoftwareLicenseServiceApiService
	vpsId string
	softwareLicenseChangeLicensePlanRequest *SoftwareLicenseChangeLicensePlanRequest
}

func (r ApiSoftwareLicenseServiceChangeLicensePlanRequest) SoftwareLicenseChangeLicensePlanRequest(softwareLicenseChangeLicensePlanRequest SoftwareLicenseChangeLicensePlanRequest) ApiSoftwareLicenseServiceChangeLicensePlanRequest {
	r.softwareLicenseChangeLicensePlanRequest = &softwareLicenseChangeLicensePlanRequest
	return r
}

func (r ApiSoftwareLicenseServiceChangeLicensePlanRequest) Execute() (*SoftwareLicenseChangeLicensePlanResponse, *http.Response, error) {
	return r.ApiService.SoftwareLicenseServiceChangeLicensePlanExecute(r)
}

/*
SoftwareLicenseServiceChangeLicensePlan Method for SoftwareLicenseServiceChangeLicensePlan

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param vpsId
 @return ApiSoftwareLicenseServiceChangeLicensePlanRequest
*/
func (a *SoftwareLicenseServiceApiService) SoftwareLicenseServiceChangeLicensePlan(ctx context.Context, vpsId string) ApiSoftwareLicenseServiceChangeLicensePlanRequest {
	return ApiSoftwareLicenseServiceChangeLicensePlanRequest{
		ApiService: a,
		ctx: ctx,
		vpsId: vpsId,
	}
}

// Execute executes the request
//  @return SoftwareLicenseChangeLicensePlanResponse
func (a *SoftwareLicenseServiceApiService) SoftwareLicenseServiceChangeLicensePlanExecute(r ApiSoftwareLicenseServiceChangeLicensePlanRequest) (*SoftwareLicenseChangeLicensePlanResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SoftwareLicenseChangeLicensePlanResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoftwareLicenseServiceApiService.SoftwareLicenseServiceChangeLicensePlan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vps/software/license/{vps_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vps_id"+"}", url.PathEscape(parameterToString(r.vpsId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.softwareLicenseChangeLicensePlanRequest == nil {
		return localVarReturnValue, nil, reportError("softwareLicenseChangeLicensePlanRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.softwareLicenseChangeLicensePlanRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSoftwareLicenseServiceGetLicenseInfoRequest struct {
	ctx context.Context
	ApiService *SoftwareLicenseServiceApiService
	licenseId *int32
}

func (r ApiSoftwareLicenseServiceGetLicenseInfoRequest) LicenseId(licenseId int32) ApiSoftwareLicenseServiceGetLicenseInfoRequest {
	r.licenseId = &licenseId
	return r
}

func (r ApiSoftwareLicenseServiceGetLicenseInfoRequest) Execute() (*SoftwareLicenseGetLicenseInfoResponse, *http.Response, error) {
	return r.ApiService.SoftwareLicenseServiceGetLicenseInfoExecute(r)
}

/*
SoftwareLicenseServiceGetLicenseInfo Method for SoftwareLicenseServiceGetLicenseInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSoftwareLicenseServiceGetLicenseInfoRequest
*/
func (a *SoftwareLicenseServiceApiService) SoftwareLicenseServiceGetLicenseInfo(ctx context.Context) ApiSoftwareLicenseServiceGetLicenseInfoRequest {
	return ApiSoftwareLicenseServiceGetLicenseInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SoftwareLicenseGetLicenseInfoResponse
func (a *SoftwareLicenseServiceApiService) SoftwareLicenseServiceGetLicenseInfoExecute(r ApiSoftwareLicenseServiceGetLicenseInfoRequest) (*SoftwareLicenseGetLicenseInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SoftwareLicenseGetLicenseInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SoftwareLicenseServiceApiService.SoftwareLicenseServiceGetLicenseInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vps/software/license"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.licenseId != nil {
		localVarQueryParams.Add("license_id", parameterToString(*r.licenseId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
