/*
API Облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.7.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps

import (
	"encoding/json"
)

// ManageGetRegionListResponse struct for ManageGetRegionListResponse
type ManageGetRegionListResponse struct {
	Regions []StructuresRegionInfo `json:"regions,omitempty"`
}

// NewManageGetRegionListResponse instantiates a new ManageGetRegionListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageGetRegionListResponse() *ManageGetRegionListResponse {
	this := ManageGetRegionListResponse{}
	return &this
}

// NewManageGetRegionListResponseWithDefaults instantiates a new ManageGetRegionListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageGetRegionListResponseWithDefaults() *ManageGetRegionListResponse {
	this := ManageGetRegionListResponse{}
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *ManageGetRegionListResponse) GetRegions() []StructuresRegionInfo {
	if o == nil || isNil(o.Regions) {
		var ret []StructuresRegionInfo
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageGetRegionListResponse) GetRegionsOk() ([]StructuresRegionInfo, bool) {
	if o == nil || isNil(o.Regions) {
    return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *ManageGetRegionListResponse) HasRegions() bool {
	if o != nil && !isNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []StructuresRegionInfo and assigns it to the Regions field.
func (o *ManageGetRegionListResponse) SetRegions(v []StructuresRegionInfo) {
	o.Regions = v
}

func (o ManageGetRegionListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return json.Marshal(toSerialize)
}

type NullableManageGetRegionListResponse struct {
	value *ManageGetRegionListResponse
	isSet bool
}

func (v NullableManageGetRegionListResponse) Get() *ManageGetRegionListResponse {
	return v.value
}

func (v *NullableManageGetRegionListResponse) Set(val *ManageGetRegionListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableManageGetRegionListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableManageGetRegionListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageGetRegionListResponse(val *ManageGetRegionListResponse) *NullableManageGetRegionListResponse {
	return &NullableManageGetRegionListResponse{value: val, isSet: true}
}

func (v NullableManageGetRegionListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageGetRegionListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


