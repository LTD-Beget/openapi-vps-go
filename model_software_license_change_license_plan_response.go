/*
API Облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps

import (
	"encoding/json"
)

// SoftwareLicenseChangeLicensePlanResponse struct for SoftwareLicenseChangeLicensePlanResponse
type SoftwareLicenseChangeLicensePlanResponse struct {
	License *StructuresIssuedSoftwareLicense `json:"license,omitempty"`
	Error *SoftwareLicenseChangeLicensePlanResponseError `json:"error,omitempty"`
}

// NewSoftwareLicenseChangeLicensePlanResponse instantiates a new SoftwareLicenseChangeLicensePlanResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareLicenseChangeLicensePlanResponse() *SoftwareLicenseChangeLicensePlanResponse {
	this := SoftwareLicenseChangeLicensePlanResponse{}
	return &this
}

// NewSoftwareLicenseChangeLicensePlanResponseWithDefaults instantiates a new SoftwareLicenseChangeLicensePlanResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareLicenseChangeLicensePlanResponseWithDefaults() *SoftwareLicenseChangeLicensePlanResponse {
	this := SoftwareLicenseChangeLicensePlanResponse{}
	return &this
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *SoftwareLicenseChangeLicensePlanResponse) GetLicense() StructuresIssuedSoftwareLicense {
	if o == nil || isNil(o.License) {
		var ret StructuresIssuedSoftwareLicense
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareLicenseChangeLicensePlanResponse) GetLicenseOk() (*StructuresIssuedSoftwareLicense, bool) {
	if o == nil || isNil(o.License) {
    return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *SoftwareLicenseChangeLicensePlanResponse) HasLicense() bool {
	if o != nil && !isNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given StructuresIssuedSoftwareLicense and assigns it to the License field.
func (o *SoftwareLicenseChangeLicensePlanResponse) SetLicense(v StructuresIssuedSoftwareLicense) {
	o.License = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SoftwareLicenseChangeLicensePlanResponse) GetError() SoftwareLicenseChangeLicensePlanResponseError {
	if o == nil || isNil(o.Error) {
		var ret SoftwareLicenseChangeLicensePlanResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareLicenseChangeLicensePlanResponse) GetErrorOk() (*SoftwareLicenseChangeLicensePlanResponseError, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SoftwareLicenseChangeLicensePlanResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given SoftwareLicenseChangeLicensePlanResponseError and assigns it to the Error field.
func (o *SoftwareLicenseChangeLicensePlanResponse) SetError(v SoftwareLicenseChangeLicensePlanResponseError) {
	o.Error = &v
}

func (o SoftwareLicenseChangeLicensePlanResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableSoftwareLicenseChangeLicensePlanResponse struct {
	value *SoftwareLicenseChangeLicensePlanResponse
	isSet bool
}

func (v NullableSoftwareLicenseChangeLicensePlanResponse) Get() *SoftwareLicenseChangeLicensePlanResponse {
	return v.value
}

func (v *NullableSoftwareLicenseChangeLicensePlanResponse) Set(val *SoftwareLicenseChangeLicensePlanResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareLicenseChangeLicensePlanResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareLicenseChangeLicensePlanResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareLicenseChangeLicensePlanResponse(val *SoftwareLicenseChangeLicensePlanResponse) *NullableSoftwareLicenseChangeLicensePlanResponse {
	return &NullableSoftwareLicenseChangeLicensePlanResponse{value: val, isSet: true}
}

func (v NullableSoftwareLicenseChangeLicensePlanResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareLicenseChangeLicensePlanResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


