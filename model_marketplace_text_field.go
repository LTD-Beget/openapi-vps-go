/*
API Облачных серверов

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.4.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package begetOpenapiVps

import (
	"encoding/json"
)

// MarketplaceTextField struct for MarketplaceTextField
type MarketplaceTextField struct {
	Common *MarketplaceFieldCommon `json:"common,omitempty"`
	IsEditable *bool `json:"is_editable,omitempty"`
}

// NewMarketplaceTextField instantiates a new MarketplaceTextField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketplaceTextField() *MarketplaceTextField {
	this := MarketplaceTextField{}
	return &this
}

// NewMarketplaceTextFieldWithDefaults instantiates a new MarketplaceTextField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketplaceTextFieldWithDefaults() *MarketplaceTextField {
	this := MarketplaceTextField{}
	return &this
}

// GetCommon returns the Common field value if set, zero value otherwise.
func (o *MarketplaceTextField) GetCommon() MarketplaceFieldCommon {
	if o == nil || isNil(o.Common) {
		var ret MarketplaceFieldCommon
		return ret
	}
	return *o.Common
}

// GetCommonOk returns a tuple with the Common field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketplaceTextField) GetCommonOk() (*MarketplaceFieldCommon, bool) {
	if o == nil || isNil(o.Common) {
    return nil, false
	}
	return o.Common, true
}

// HasCommon returns a boolean if a field has been set.
func (o *MarketplaceTextField) HasCommon() bool {
	if o != nil && !isNil(o.Common) {
		return true
	}

	return false
}

// SetCommon gets a reference to the given MarketplaceFieldCommon and assigns it to the Common field.
func (o *MarketplaceTextField) SetCommon(v MarketplaceFieldCommon) {
	o.Common = &v
}

// GetIsEditable returns the IsEditable field value if set, zero value otherwise.
func (o *MarketplaceTextField) GetIsEditable() bool {
	if o == nil || isNil(o.IsEditable) {
		var ret bool
		return ret
	}
	return *o.IsEditable
}

// GetIsEditableOk returns a tuple with the IsEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketplaceTextField) GetIsEditableOk() (*bool, bool) {
	if o == nil || isNil(o.IsEditable) {
    return nil, false
	}
	return o.IsEditable, true
}

// HasIsEditable returns a boolean if a field has been set.
func (o *MarketplaceTextField) HasIsEditable() bool {
	if o != nil && !isNil(o.IsEditable) {
		return true
	}

	return false
}

// SetIsEditable gets a reference to the given bool and assigns it to the IsEditable field.
func (o *MarketplaceTextField) SetIsEditable(v bool) {
	o.IsEditable = &v
}

func (o MarketplaceTextField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Common) {
		toSerialize["common"] = o.Common
	}
	if !isNil(o.IsEditable) {
		toSerialize["is_editable"] = o.IsEditable
	}
	return json.Marshal(toSerialize)
}

type NullableMarketplaceTextField struct {
	value *MarketplaceTextField
	isSet bool
}

func (v NullableMarketplaceTextField) Get() *MarketplaceTextField {
	return v.value
}

func (v *NullableMarketplaceTextField) Set(val *MarketplaceTextField) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketplaceTextField) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketplaceTextField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketplaceTextField(val *MarketplaceTextField) *NullableMarketplaceTextField {
	return &NullableMarketplaceTextField{value: val, isSet: true}
}

func (v NullableMarketplaceTextField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketplaceTextField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


